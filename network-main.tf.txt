resource "google_compute_network" "vpc" {
  provider                                  = google-beta
  name                                      = var.network_name
  description                               = var.description
  auto_create_subnetworks                   = var.auto_create_subnetworks
  routing_mode                              = var.routing_mode
  #bgp_best_path_selection_mode              = var.bgp_best_path_selection_mode
  #bgp_always_compare_med                    = var.bgp_always_compare_med
  #bgp_inter_region_cost                     = var.bgp_inter_region_cost
  mtu                                       = var.mtu
  enable_ula_internal_ipv6                  = var.enable_ula_internal_ipv6
  internal_ipv6_range                       = var.internal_ipv6_range
  network_firewall_policy_enforcement_order = var.network_firewall_policy_enforcement_order
  project                                   = var.project_id
  delete_default_routes_on_create           = var.delete_default_internet_gateway_routes
}

locals {
  subnets = {
    for x in var.subnets :
    "${x.subnet_region}/${x.subnet_name}" => x
  }
}


/******************************************
	Subnet configuration
 *****************************************/
resource "google_compute_subnetwork" "subnetwork" {

  for_each                   = local.subnets
  name                       = each.value.subnet_name
  ip_cidr_range              = each.value.subnet_ip
  region                     = each.value.subnet_region
  private_ip_google_access   = lookup(each.value, "subnet_private_access", "false")
  private_ipv6_google_access = lookup(each.value, "subnet_private_ipv6_access", null)
  dynamic "log_config" {
    for_each = coalesce(lookup(each.value, "subnet_flow_logs", null), false) ? [{
      aggregation_interval = each.value.subnet_flow_logs_interval
      flow_sampling        = each.value.subnet_flow_logs_sampling
      metadata             = each.value.subnet_flow_logs_metadata
      filter_expr          = each.value.subnet_flow_logs_filter
      metadata_fields      = each.value.subnet_flow_logs_metadata_fields
    }] : []
    content {
      aggregation_interval = log_config.value.aggregation_interval
      flow_sampling        = log_config.value.flow_sampling
      metadata             = log_config.value.metadata
      filter_expr          = log_config.value.filter_expr
      metadata_fields      = log_config.value.metadata == "CUSTOM_METADATA" ? log_config.value.metadata_fields : null
    }
  }
  network     = var.network_name
  project     = var.project_id
  description = lookup(each.value, "description", null)
  dynamic "secondary_ip_range" {
    for_each = contains(keys(var.secondary_ranges), each.value.subnet_name) == true ? var.secondary_ranges[each.value.subnet_name] : []

    content {
      range_name    = secondary_ip_range.value.range_name
      ip_cidr_range = secondary_ip_range.value.ip_cidr_range
    }
  }

  purpose          = lookup(each.value, "purpose", null)
  role             = lookup(each.value, "role", null)
  stack_type       = lookup(each.value, "stack_type", null)
  ipv6_access_type = lookup(each.value, "ipv6_access_type", null)
}

#.................................. Firewall ...................................#

resource "google_compute_firewall" "rules" {
  for_each                = { for r in var.rules : r.name => r }
  name                    = each.value.name
  description             = each.value.description
  direction               = each.value.direction
  disabled                = each.value.disabled
  network                 = var.network_name
  project                 = var.project_id
  source_ranges           = each.value.source_ranges
  destination_ranges      = each.value.destination_ranges
  source_tags             = each.value.source_tags
  source_service_accounts = each.value.source_service_accounts
  target_tags             = each.value.target_tags
  target_service_accounts = each.value.target_service_accounts
  priority                = each.value.priority

  dynamic "log_config" {
    for_each              = lookup(each.value, "log_config") == null ? [] : [each.value.log_config]
    content {
      metadata            = log_config.value.metadata
    }
  }

  dynamic "allow" {
    for_each              = lookup(each.value, "allow", [])
    content {
      protocol            = allow.value.protocol
      ports               = lookup(allow.value, "ports", null)
    }
  }

  dynamic "deny" {
    for_each              = lookup(each.value, "deny", [])
    content {
      protocol            = deny.value.protocol
      ports               = lookup(deny.value, "ports", null)
    }
  }
}

#...................................................... locals ..........................................................#

locals {
  project       = var.project_id
  address_type  = var.global_address_type
}

#................................................... Global Address .....................................................#

resource "google_compute_global_address" "default" {
  provider      = google-beta
  project       = local.project
  name          = var.global_address_name
  description   = var.global_address_description
  address_type  = local.address_type 
  purpose       = local.address_type == "EXTERNAL" ? null : var.global_address_purpose
  prefix_length = local.address_type == "EXTERNAL" ? null : var.global_address_prefix_length
  network       = local.address_type == "EXTERNAL" ? null : var.global_address_network
  labels        = var.labels
  address       = local.address_type == "EXTERNAL" ? null : var.global_address_ip
}

#...................................................... locals ..........................................................#

locals {
  project       = var.project_id
  region        = var.region
  address_type  = var.address_type
  purpose       = var.address_purpose
}

#...................................................... Address .........................................................#

resource "google_compute_address" "default" {
  project       = local.project
  region        = local.region
  name          = var.address_name
  description   = var.address_description
  address_type  = local.address_type 
  purpose       = local.purpose
  network_tier  = local.address_type == "INTERNAL" ? null : var.network_tier
  prefix_length = var.address_prefix_length  
  network       = local.address_type == "INTERNAL" && local.purpose == "VPC_PEERING" || local.purpose == "IPSEC_INTERCONNECT" ? var.address_network : null
  subnetwork    = local.address_type == "INTERNAL" && local.purpose == "GCE_ENDPOINT" ? var.address_subnetwork : null
  labels        = var.labels
  address       = local.address_type == "INTERNAL" ? var.address_ip : null
}

resource "google_compute_router" "router" {
  provider                        = google-beta
  #count                           = var.create_router == true ? 1 : 0
  name                            = var.router_name
  network                         = var.network
  description                     = var.router_description
  
  dynamic "bgp" {
    for_each                      = var.bgp
    content {
      asn                         = bgp.value.asn
      advertise_mode              = bgp.value.advertise_mode
      advertised_groups           = bgp.value.advertised_groups
      dynamic "advertised_ip_ranges" {
        for_each                  = lookup(bgp.value, "advertised_ip_ranges", [])
        content {
          range                   = advertised_ip_ranges.value.range
          description             = advertised_ip_ranges.value.description
        }
      }
      keepalive_interval          = bgp.value.keepalive_interval
      identifier_range            = bgp.value.identifier_range
    }
  }

  encrypted_interconnect_router   = var.encrypted_interconnect_router
  region                          = var.region
  project                         = var.project_id
}

resource "google_compute_router_nat" "nat" {
  provider                            = google-beta
  #count                               = var.create_nat ? 1 : 0
  project                             = var.project_id
  region                              = var.region
  name                                = var.nat_name
  router                              = var.router_name
  nat_ip_allocate_option              = var.nat_ip_allocate_option
  #initial_nat_ips                     = var.initial_nat_ips 
  nat_ips                             = var.nat_ip_allocate_option == "MANUAL_ONLY" ? var.nat_ips : null
  drain_nat_ips                       = var.drain_nat_ips 
  source_subnetwork_ip_ranges_to_nat  = var.source_subnetwork_ip_ranges_to_nat
  min_ports_per_vm                    = var.min_ports_per_vm
  max_ports_per_vm                    = var.max_ports_per_vm
  enable_dynamic_port_allocation      = var.enable_dynamic_port_allocation
  type                                =var.type
  udp_idle_timeout_sec                = var.udp_idle_timeout_sec
  icmp_idle_timeout_sec               = var.icmp_idle_timeout_sec
  tcp_established_idle_timeout_sec    = var.tcp_established_idle_timeout_sec
  tcp_transitory_idle_timeout_sec     = var.tcp_transitory_idle_timeout_sec
  tcp_time_wait_timeout_sec           =var.tcp_time_wait_timeout_sec 
  enable_endpoint_independent_mapping = var.enable_endpoint_independent_mapping
  dynamic "subnetwork" {
    for_each                          = var.subnetworks
    content {
      name                            = subnetwork.value.name
      source_ip_ranges_to_nat         = subnetwork.value.source_ip_ranges_to_nat
      secondary_ip_range_names        = contains(subnetwork.value.source_ip_ranges_to_nat, "LIST_OF_SECONDARY_IP_RANGES") ? subnetwork.value.secondary_ip_range_names : []
    }
  }

  dynamic "log_config" {
    for_each                          = var.log_config 
    content {
      filter                          = log_config.value.filter
      enable                          = log_config.value.enable
    }
  }
  
  endpoint_types                      = var.endpoint_types
  dynamic "rules" {
    for_each                          = var.rules
    content {
      rule_number                     = lookup(rules.value, "rule_number", "")
      description                     = lookup(rules.value, "description" ,"")
      match                           = lookup(rules.value, "match" , "")
      dynamic "action" {
        for_each = lookup(rules.value, "action" , [])
        content {
          source_nat_active_ips       = lookup(action.value, "source_nat_active_ips" , "")
          source_nat_drain_ips        = lookup(action.value, "source_nat_drain_ips" , "")
          source_nat_active_ranges    = lookup(action.value, "source_nat_active_ranges" , "")
          source_nat_drain_ranges     = lookup(action.value, "source_nat_drain_ranges" , "")
        }
        
      }
    }
    
  }
  auto_network_tier                  = var.auto_network_tier
}

locals {
  host_project       = var.host_project_id
}

resource "google_compute_shared_vpc_host_project" "host_project" {
  #provider            = google-beta
  #count              = var.shared_vpc ? 1 : 0
  project            = local.host_project
}

locals {
  host_project       = var.host_project_id
  service_project    = var.service_project_id
}

resource "google_compute_shared_vpc_service_project" "service_project" {
  provider           = google-beta
  #for_each           = toset(local.service_project)
  #count              = length(local.service_project)
  #service_project    = each.key
  host_project       = local.host_project
  service_project    = local.service_project
}


resource "google_vpc_access_connector" "name" {
    name                           = var.name
    network                        = var.network
    ip_cidr_range                  = var.ip_cidr_range
    machine_type                   = var.machine_type
    min_throughput                 = var.min_throughput
    min_instances                  = var.min_instances
    max_instances                  = var.max_instances
    max_throughput                 = var.max_throughput
    dynamic "subnet" {
        for_each = var.subnet
        content {
          name                     = lookup(subnet.value, "name" ,"")
          project_id               = lookup(subnet.value, "project_id" ,"")
        }
    }
    region                         = var.region
    project                        = var.project
}
