resource "google_compute_network" "vpc" {
  provider                                  = google-beta
  name                                      = var.network_name
  description                               = var.description
  auto_create_subnetworks                   = var.auto_create_subnetworks
  routing_mode                              = var.routing_mode
  #bgp_best_path_selection_mode              = var.bgp_best_path_selection_mode
  #bgp_always_compare_med                    = var.bgp_always_compare_med
  #bgp_inter_region_cost                     = var.bgp_inter_region_cost
  mtu                                       = var.mtu
  enable_ula_internal_ipv6                  = var.enable_ula_internal_ipv6
  internal_ipv6_range                       = var.internal_ipv6_range
  network_firewall_policy_enforcement_order = var.network_firewall_policy_enforcement_order
  project                                   = var.project_id
  delete_default_routes_on_create           = var.delete_default_internet_gateway_routes
}

locals {
  subnets = {
    for x in var.subnets :
    "${x.subnet_region}/${x.subnet_name}" => x
  }
}


/******************************************
	Subnet configuration
 *****************************************/
resource "google_compute_subnetwork" "subnetwork" {

  for_each                   = local.subnets
  name                       = each.value.subnet_name
  ip_cidr_range              = each.value.subnet_ip
  region                     = each.value.subnet_region
  private_ip_google_access   = lookup(each.value, "subnet_private_access", "false")
  private_ipv6_google_access = lookup(each.value, "subnet_private_ipv6_access", null)
  dynamic "log_config" {
    for_each = coalesce(lookup(each.value, "subnet_flow_logs", null), false) ? [{
      aggregation_interval = each.value.subnet_flow_logs_interval
      flow_sampling        = each.value.subnet_flow_logs_sampling
      metadata             = each.value.subnet_flow_logs_metadata
      filter_expr          = each.value.subnet_flow_logs_filter
      metadata_fields      = each.value.subnet_flow_logs_metadata_fields
    }] : []
    content {
      aggregation_interval = log_config.value.aggregation_interval
      flow_sampling        = log_config.value.flow_sampling
      metadata             = log_config.value.metadata
      filter_expr          = log_config.value.filter_expr
      metadata_fields      = log_config.value.metadata == "CUSTOM_METADATA" ? log_config.value.metadata_fields : null
    }
  }
  network     = var.network_name
  project     = var.project_id
  description = lookup(each.value, "description", null)
  dynamic "secondary_ip_range" {
    for_each = contains(keys(var.secondary_ranges), each.value.subnet_name) == true ? var.secondary_ranges[each.value.subnet_name] : []

    content {
      range_name    = secondary_ip_range.value.range_name
      ip_cidr_range = secondary_ip_range.value.ip_cidr_range
    }
  }

  purpose          = lookup(each.value, "purpose", null)
  role             = lookup(each.value, "role", null)
  stack_type       = lookup(each.value, "stack_type", null)
  ipv6_access_type = lookup(each.value, "ipv6_access_type", null)
}

#.................................. Firewall ...................................#

resource "google_compute_firewall" "rules" {
  for_each                = { for r in var.rules : r.name => r }
  name                    = each.value.name
  description             = each.value.description
  direction               = each.value.direction
  disabled                = each.value.disabled
  network                 = var.network_name
  project                 = var.project_id
  source_ranges           = each.value.source_ranges
  destination_ranges      = each.value.destination_ranges
  source_tags             = each.value.source_tags
  source_service_accounts = each.value.source_service_accounts
  target_tags             = each.value.target_tags
  target_service_accounts = each.value.target_service_accounts
  priority                = each.value.priority

  dynamic "log_config" {
    for_each              = lookup(each.value, "log_config") == null ? [] : [each.value.log_config]
    content {
      metadata            = log_config.value.metadata
    }
  }

  dynamic "allow" {
    for_each              = lookup(each.value, "allow", [])
    content {
      protocol            = allow.value.protocol
      ports               = lookup(allow.value, "ports", null)
    }
  }

  dynamic "deny" {
    for_each              = lookup(each.value, "deny", [])
    content {
      protocol            = deny.value.protocol
      ports               = lookup(deny.value, "ports", null)
    }
  }
}

#...................................................... locals ..........................................................#

locals {
  project       = var.project_id
  address_type  = var.global_address_type
}

#................................................... Global Address .....................................................#

resource "google_compute_global_address" "default" {
  provider      = google-beta
  project       = local.project
  name          = var.global_address_name
  description   = var.global_address_description
  address_type  = local.address_type 
  purpose       = local.address_type == "EXTERNAL" ? null : var.global_address_purpose
  prefix_length = local.address_type == "EXTERNAL" ? null : var.global_address_prefix_length
  network       = local.address_type == "EXTERNAL" ? null : var.global_address_network
  labels        = var.labels
  address       = local.address_type == "EXTERNAL" ? null : var.global_address_ip
}

#...................................................... locals ..........................................................#

locals {
  project       = var.project_id
  region        = var.region
  address_type  = var.address_type
  purpose       = var.address_purpose
}

#...................................................... Address .........................................................#

resource "google_compute_address" "default" {
  project       = local.project
  region        = local.region
  name          = var.address_name
  description   = var.address_description
  address_type  = local.address_type 
  purpose       = local.purpose
  network_tier  = local.address_type == "INTERNAL" ? null : var.network_tier
  prefix_length = var.address_prefix_length  
  network       = local.address_type == "INTERNAL" && local.purpose == "VPC_PEERING" || local.purpose == "IPSEC_INTERCONNECT" ? var.address_network : null
  subnetwork    = local.address_type == "INTERNAL" && local.purpose == "GCE_ENDPOINT" ? var.address_subnetwork : null
  labels        = var.labels
  address       = local.address_type == "INTERNAL" ? var.address_ip : null
}